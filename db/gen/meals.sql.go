// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: meals.sql

package gen

import (
	"context"
)

const mealCreate = `-- name: MealCreate :one
INSERT INTO meals (
    name,
    author_id
) VALUES (
    ?,
    ?
) RETURNING id, name, author_id, created_at, updated_at, deleted_at
`

type MealCreateParams struct {
	Name     string
	AuthorID int64
}

func (q *Queries) MealCreate(ctx context.Context, arg MealCreateParams) (Meal, error) {
	row := q.db.QueryRowContext(ctx, mealCreate, arg.Name, arg.AuthorID)
	var i Meal
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.AuthorID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const mealList = `-- name: MealList :many
SELECT id, name, author_id, created_at, updated_at, deleted_at FROM meals
ORDER BY id
`

func (q *Queries) MealList(ctx context.Context) ([]Meal, error) {
	rows, err := q.db.QueryContext(ctx, mealList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Meal
	for rows.Next() {
		var i Meal
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.AuthorID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
