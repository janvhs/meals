// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id) VALUES (?) RETURNING id, created_at, updated_at, deleted_at
`

func (q *Queries) CreateUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUserPermanently = `-- name: DeleteUserPermanently :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUserPermanently(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserPermanently, id)
	return err
}

const deleteUserSoftly = `-- name: DeleteUserSoftly :exec
UPDATE users
set deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteUserSoftly(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUserSoftly, id)
	return err
}

const ensureExistsUser = `-- name: EnsureExistsUser :exec
INSERT INTO users (id) VALUES (?) ON CONFLICT (id) DO NOTHING
`

func (q *Queries) EnsureExistsUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, ensureExistsUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, created_at, updated_at, deleted_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, deleted_at FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
